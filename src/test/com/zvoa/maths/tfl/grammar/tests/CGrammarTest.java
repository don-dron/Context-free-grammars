package com.zvoa.maths.tfl.grammar.tests;

import com.zvoa.maths.tfl.grammar.*;
import org.junit.*;

public class CGrammarTest {

    public static final String DECLARATION_SPECIFIERS = "declaration_specifiers";
    public static final String DECLARATOR = "declarator";
    public static final String DECLARATION_LIST = "declaration_list";
    public static final String FUNCTION_DEFINITION = "function_definition";
    public static final String COMPOUND_STATEMENT = "compound_statement";
    public static final String EXTERNAL_DECLARATION = "external_declaration";
    public static final String TRANSLATION_UNIT = "translation_unit";
    public static final String DECLARATION = "declaration";
    public static final String JUMP_STATEMENT = "jump_statement";
    public static final String GOTO = "goto";
    public static final String IDENTIFIER = "identifier";
    public static final String SEMICOLON = ";";
    public static final String CONTINUE = "continue";
    public static final String BREAK = "break";
    public static final String RETURN = "return";
    public static final String ITERATION_STATEMENT = "iteration_statement";
    public static final String WHILE = "while";
    public static final String LEFT_BRACKET = "(";
    public static final String RIGHT_BRACKET = ")";
    public static final String EXPRESSION = "expression";
    public static final String STATEMENT = "statement";
    public static final String EXPRESSION_STATEMENT = "expression_statement";
    public static final String FOR = "for";
    public static final String DO = "do";
    public static final String IF = "if";
    public static final String ELSE = "else";
    public static final String SWITCH = "switch";
    public static final String STATEMENT_LIST = "statement_list";
    public static final String LEFT_FIGURE_BRACKET = "{";
    public static final String RIGHT_FIGURE_BRACKET = "}";
    public static final String LABELED_STATEMENT = "labeled_statement";
    public static final String COLON = ":";
    public static final String CASE = "case";
    public static final String CONSTANT_EXPRESSION = "constant_expression";
    public static final String DEFAULT = "default";
    public static final String SELECTION_STATEMENT = "selection_statement";
    public static final String INITIALIZER_LIST = "initializer_list";
    public static final String INITIALIZER = "initializer";
    public static final String COMMA = ",";
    public static final String ASSIGMENT_EXPRESSION = "assigment_expression";
    public static final String DIRECT_ABSTRACT_DECLARATOR = "direct_abstract_declarator";
    public static final String ABSTRACT_DECLARATOR = "abstract_declarator";
    public static final String LEFT_SQUARE_BRACKET = "[";
    public static final String RIGHT_SQUARE_BRACKET = "]";
    public static final String PARAMETER_TYPE_LIST = "parameter_type_list";
    public static final String POINTER = "pointer";
    public static final String TYPE_NAME = "type_name";
    public static final String SPECIFIER_QUALIFIER_LIST = "specifier_qualifier_list";
    public static final String IDENTIFIER_LIST = "identifier_list";
    public static final String PARAMETER_DECLARATION = "parameter_declaration";
    public static final String PARAMETER_LIST = "parameter_list";
    public static final String ELLIPSIS = "...";
    public static final String TYPE_QUALIFIER_LIST = "type_qualifier_list";
    public static final String TYPE_QUALIFIER = "type_qualifier";
    public static final String ASTERISK = "*";
    public static final String DIRECT_DECLARATOR = "direct_declarator";
    public static final String CONST = "const";
    public static final String VOLATILE = "volatile";
    public static final String ENUMERATOR = "enumerator";
    public static final String EQUAL = "=";
    public static final String ENUMERATOR_LIST = "enumerator_list";
    public static final String ENUM_SPECIFIER = "enum_specifier";
    public static final String ENUM = "enum";
    public static final String STRUCT_DECLARATOR = "struct_declarator";
    public static final String STRUCT_DECLARATOR_LIST = "struct_declarator_list";
    public static final String TYPE_SPECIFIER = "type_specifier";
    public static final String STRUCT_DECLARATION_LIST = "struct_declaration_list";
    public static final String STRUCT_DECLARATION = "struct_declaration";
    public static final String STRUCT_OR_UNION = "struct_or_union";
    public static final String UNION = "union";
    public static final String STRUCT = "struct";
    public static final String STRUCT_OR_UNION_SPECIFIER = "struct_or_union_specifier";
    public static final String VOID = "void";
    public static final String CHAR = "char";
    public static final String SHORT = "short";
    public static final String INT = "int";
    public static final String LONG = "long";
    public static final String FLOAT = "float";
    public static final String DOUBLE = "double";
    public static final String SIGNED = "signed";
    public static final String UNSIGNED = "unsigned";
    public static final String STORAGE_CLASS_SPECIFIER = "storage_class_specifier";
    public static final String TYPEDEF = "typedef";
    public static final String EXTERN = "extern";
    public static final String AUTO = "auto";
    public static final String STATIC = "static";
    public static final String REGISTER = "register";
    public static final String INIT_DECLARATOR = "init_declarator";
    public static final String INIT_DECLARATOR_LIST = "init_declarator_list";

    @Test
    public void CFullGrammarTest() {
        Grammar grammar = GrammarFactory
                .build()
                .addNonTerminal(FUNCTION_DEFINITION)
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(DECLARATOR)
                        .addSymbol(DECLARATION_LIST)
                        .addSymbol(COMPOUND_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(DECLARATOR)
                        .addSymbol(COMPOUND_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(DECLARATION_LIST)
                        .addSymbol(COMPOUND_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(COMPOUND_STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(EXTERNAL_DECLARATION)
                    .addRule()
                        .addSymbol(FUNCTION_DEFINITION)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(TRANSLATION_UNIT)
                    .addRule()
                        .addSymbol(EXTERNAL_DECLARATION)
                    .endRule()
                    .addRule()
                        .addSymbol(TRANSLATION_UNIT)
                        .addSymbol(EXTERNAL_DECLARATION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(JUMP_STATEMENT)
                    .addRule()
                        .addSymbol(GOTO)
                        .addSymbol(IDENTIFIER)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(CONTINUE)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(BREAK)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(RETURN)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(RETURN)
                        .addSymbol(IDENTIFIER)
                        .addSymbol(SEMICOLON)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(ITERATION_STATEMENT)
                    .addRule()
                        .addSymbol(WHILE)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(DO)
                        .addSymbol(STATEMENT)
                        .addSymbol(WHILE)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(FOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION_STATEMENT)
                        .addSymbol(EXPRESSION_STATEMENT)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(FOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION_STATEMENT)
                        .addSymbol(EXPRESSION_STATEMENT)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(SELECTION_STATEMENT)
                    .addRule()
                        .addSymbol(IF)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(IF)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                        .addSymbol(ELSE)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(SWITCH)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(EXPRESSION)
                        .addSymbol(RIGHT_BRACKET)
                        .addSymbol(STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(EXPRESSION_STATEMENT)
                    .addRule()
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(EXPRESSION)
                    .addSymbol(SEMICOLON)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STATEMENT_LIST)
                    .addRule()
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(STATEMENT_LIST)
                        .addSymbol(STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DECLARATION_LIST)
                    .addRule()
                        .addSymbol(DECLARATION)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_LIST)
                        .addSymbol(DECLARATION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(COMPOUND_STATEMENT)
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(STATEMENT_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(DECLARATION_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(DECLARATION_LIST)
                        .addSymbol(STATEMENT_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(LABELED_STATEMENT)
                    .addRule()
                        .addSymbol(IDENTIFIER)
                        .addSymbol(COLON)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(CASE)
                        .addSymbol(CONSTANT_EXPRESSION)
                        .addSymbol(COLON)
                        .addSymbol(STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(DEFAULT)
                        .addSymbol(COLON)
                        .addSymbol(STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STATEMENT)
                    .addRule()
                        .addSymbol(LABELED_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(COMPOUND_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(EXPRESSION_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(SELECTION_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(ITERATION_STATEMENT)
                    .endRule()
                    .addRule()
                        .addSymbol(JUMP_STATEMENT)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(INITIALIZER_LIST)
                    .addRule()
                        .addSymbol(INITIALIZER)
                    .endRule()
                    .addRule()
                        .addSymbol(INITIALIZER_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(INITIALIZER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(INITIALIZER)
                    .addRule()
                        .addSymbol(ASSIGMENT_EXPRESSION)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(INITIALIZER_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(INITIALIZER_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DIRECT_ABSTRACT_DECLARATOR)
                    .addRule()
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(ABSTRACT_DECLARATOR)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(PARAMETER_TYPE_LIST)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(PARAMETER_TYPE_LIST)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(CONSTANT_EXPRESSION)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(CONSTANT_EXPRESSION)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(ABSTRACT_DECLARATOR)
                    .addRule()
                        .addSymbol(POINTER)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(POINTER)
                        .addSymbol(DIRECT_ABSTRACT_DECLARATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(TYPE_NAME)
                    .addRule()
                        .addSymbol(SPECIFIER_QUALIFIER_LIST)
                    .endRule()
                    .addRule()
                        .addSymbol(SPECIFIER_QUALIFIER_LIST)
                        .addSymbol(ABSTRACT_DECLARATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(IDENTIFIER_LIST)
                    .addRule()
                        .addSymbol(IDENTIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(IDENTIFIER_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(IDENTIFIER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(PARAMETER_DECLARATION)
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(ABSTRACT_DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(PARAMETER_LIST)
                    .addRule()
                        .addSymbol(PARAMETER_DECLARATION)
                    .endRule()
                    .addRule()
                        .addSymbol(PARAMETER_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(PARAMETER_DECLARATION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(PARAMETER_TYPE_LIST)
                    .addRule()
                        .addSymbol(PARAMETER_LIST)
                    .endRule()
                    .addRule()
                        .addSymbol(PARAMETER_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(ELLIPSIS)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(TYPE_QUALIFIER_LIST)
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER_LIST)
                        .addSymbol(TYPE_QUALIFIER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(POINTER)
                    .addRule()
                        .addSymbol(ASTERISK)
                    .endRule()
                    .addRule()
                        .addSymbol(ASTERISK)
                        .addSymbol(TYPE_QUALIFIER_LIST)
                    .endRule()
                    .addRule()
                        .addSymbol(ASTERISK)
                        .addSymbol(POINTER)
                    .endRule()
                    .addRule()
                        .addSymbol(ASTERISK)
                        .addSymbol(TYPE_QUALIFIER_LIST)
                        .addSymbol(POINTER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DIRECT_DECLARATOR)
                    .addRule()
                        .addSymbol(IDENTIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(DECLARATOR)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(CONSTANT_EXPRESSION)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                        .addSymbol(LEFT_SQUARE_BRACKET)
                        .addSymbol(RIGHT_SQUARE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(PARAMETER_TYPE_LIST)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(IDENTIFIER_LIST)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                        .addSymbol(LEFT_BRACKET)
                        .addSymbol(RIGHT_BRACKET)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DECLARATOR)
                    .addRule()
                        .addSymbol(POINTER)
                        .addSymbol(DIRECT_DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(DIRECT_DECLARATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(TYPE_QUALIFIER)
                    .addRule()
                        .addSymbol(CONST)
                    .endRule()
                    .addRule()
                        .addSymbol(VOLATILE)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(ENUMERATOR)
                    .addRule()
                        .addSymbol(IDENTIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(IDENTIFIER)
                        .addSymbol(EQUAL)
                        .addSymbol(CONSTANT_EXPRESSION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(ENUMERATOR_LIST)
                    .addRule()
                        .addSymbol(ENUMERATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(ENUMERATOR_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(ENUMERATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(ENUM_SPECIFIER)
                    .addRule()
                        .addSymbol(ENUM)
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(ENUMERATOR_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(ENUM)
                        .addSymbol(IDENTIFIER)
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(ENUMERATOR_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(ENUM)
                        .addSymbol(IDENTIFIER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_DECLARATOR)
                    .addRule()
                        .addSymbol(DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(COLON)
                        .addSymbol(CONSTANT_EXPRESSION)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATOR)
                        .addSymbol(COLON)
                        .addSymbol(CONSTANT_EXPRESSION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_DECLARATOR_LIST)
                    .addRule()
                        .addSymbol(STRUCT_DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(STRUCT_DECLARATOR_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(STRUCT_DECLARATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(SPECIFIER_QUALIFIER_LIST)
                    .addRule()
                        .addSymbol(TYPE_SPECIFIER)
                        .addSymbol(SPECIFIER_QUALIFIER_LIST)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_SPECIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER)
                        .addSymbol(SPECIFIER_QUALIFIER_LIST)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_DECLARATION)
                    .addRule()
                        .addSymbol(SPECIFIER_QUALIFIER_LIST)
                        .addSymbol(STRUCT_DECLARATOR_LIST)
                        .addSymbol(SEMICOLON)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_DECLARATION_LIST)
                    .addRule()
                        .addSymbol(STRUCT_DECLARATION)
                    .endRule()
                    .addRule()
                        .addSymbol(STRUCT_DECLARATION_LIST)
                        .addSymbol(STRUCT_DECLARATION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_OR_UNION)
                    .addRule()
                        .addSymbol(STRUCT)
                    .endRule()
                    .addRule()
                        .addSymbol(UNION)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(STRUCT_OR_UNION_SPECIFIER)
                    .addRule()
                        .addSymbol(STRUCT_OR_UNION)
                        .addSymbol(IDENTIFIER)
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(STRUCT_DECLARATION_LIST)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(STRUCT_OR_UNION)
                        .addSymbol(STRUCT_DECLARATION_LIST)
                        .addSymbol(LEFT_FIGURE_BRACKET)
                        .addSymbol(RIGHT_FIGURE_BRACKET)
                    .endRule()
                    .addRule()
                        .addSymbol(STRUCT_OR_UNION)
                        .addSymbol(IDENTIFIER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(TYPE_SPECIFIER)
                .addRule()
                    .addSymbol(VOID)
                .endRule()

                .addRule()
                    .addSymbol(CHAR)
                .endRule()

                .addRule()
                    .addSymbol(SHORT)
                .endRule()

                .addRule()
                    .addSymbol(INT)
                .endRule()

                .addRule()
                    .addSymbol(LONG)
                .endRule()

                .addRule()
                    .addSymbol(FLOAT)
                .endRule()

                .addRule()
                    .addSymbol(DOUBLE)
                .endRule()

                .addRule()
                    .addSymbol(SIGNED)
                .endRule()

                .addRule()
                    .addSymbol(UNSIGNED)
                .endRule()

                .addRule()
                    .addSymbol(STRUCT_OR_UNION_SPECIFIER)
                .endRule()

                .addRule()
                    .addSymbol(ENUM_SPECIFIER)
                .endRule()

                .addRule()
                    .addSymbol(TYPE_NAME)
                .endRule()
                .endNonTerminal()

                .addNonTerminal(STORAGE_CLASS_SPECIFIER)
                    .addRule()
                        .addSymbol(TYPEDEF)
                    .endRule()
                    .addRule()
                        .addSymbol(EXTERN)
                    .endRule()
                    .addRule()
                        .addSymbol(STATIC)
                    .endRule()
                    .addRule()
                        .addSymbol(AUTO)
                    .endRule()
                    .addRule()
                        .addSymbol(REGISTER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(INIT_DECLARATOR)
                    .addRule()
                        .addSymbol(DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATOR)
                        .addSymbol(EQUAL)
                        .addSymbol(INITIALIZER)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(INIT_DECLARATOR_LIST)
                    .addRule()
                        .addSymbol(INIT_DECLARATOR)
                    .endRule()
                    .addRule()
                        .addSymbol(INIT_DECLARATOR_LIST)
                        .addSymbol(COMMA)
                        .addSymbol(INIT_DECLARATOR)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DECLARATION_SPECIFIERS)
                    .addRule()
                        .addSymbol(STORAGE_CLASS_SPECIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(STORAGE_CLASS_SPECIFIER)
                        .addSymbol(DECLARATION_SPECIFIERS)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_SPECIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_SPECIFIER)
                        .addSymbol(DECLARATION_SPECIFIERS)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER)
                    .endRule()
                    .addRule()
                        .addSymbol(TYPE_QUALIFIER)
                        .addSymbol(DECLARATION_SPECIFIERS)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(DECLARATION)
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(SEMICOLON)
                    .endRule()
                    .addRule()
                        .addSymbol(DECLARATION_SPECIFIERS)
                        .addSymbol(INIT_DECLARATOR_LIST)
                        .addSymbol(SEMICOLON)
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(CONSTANT_EXPRESSION)
                    .addRule()
                        .addSymbol("conditional_expression")
                    .endRule()
                .endNonTerminal()

                .addNonTerminal(EXPRESSION)
                .addRule()
                .addSymbol("conditional_expression")
                .endRule()
                .endNonTerminal()

                .endGrammar();

        System.out.println(grammar);
    }

    @After
    public void timeStampTest() {
        //
    }
}